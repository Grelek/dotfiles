" Functions
" """""""""
" Get operating system
function! GetRunningOS()
	if has('win32')
		return 'windows'
	endif

	if has('unix')
		if system('uname')=~'Darwin'
			return 'mac'
		else
			return 'linux'
		endif
	endif
endfunction
let OS=GetRunningOS()

" Toggle between relative and absolute numbers
function! NumberToggle()
	if &relativenumber==1
		set norelativenumber
		set number
	else
		set nonumber
		set relativenumber
	endif
endfunction

" Rotate between colorschemes
function! RotateColors()
	if !exists('colors_list')
		let colors_list=
			\sort(map(
			\filter(split(globpath(&rtp, "colors/*.vim"), "\n"), 'v:val !~ "^/usr/"'),
			\"substitute(fnamemodify(v:val, ':t'), '\\..\\{-}$', '', '')"))
	endif

	if !exists('colorsindex')
		let colors_index=index(colors_list, g:colors_name)
	endif

	let colors_index=(colors_index + 1) % len(colors_list)
	let name=colors_list[colors_index]

	execute 'colorscheme' name
	execute 'AirlineTheme' name
	redraw
	echo name
endfunction

" Configuration
" """""""""""""
if OS=='windows'
	set rtp+=~/.nvim/
endif

" Install Plug if missing
if empty(glob('~/.nvim/autoload/plug.vim'))
	silent !curl -fLo ~/.nvim/autoload/plug.vim --create-dirs
		\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

	autocmd VimEnter * PlugInstall
endif

" Plugins
call plug#begin('~/.nvim/plugged')
	" Required by a lot of Vim plugins
	Plug 'L9'

	" File browser
	Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
	" Leader + x to open NERDTree
	nnoremap <Leader>x :NERDTreeToggle<CR>
	inoremap <Leader>x <ESC>:NERDTreeToggle<CR>

	let NERDTreeChDirMode=2 "When directory is changed, change CWD, too
	let NERDTreeShowHidden=1 "Show hidden files except temp, system & VCS files
	let NERDTreeIgnore=[]
	for suffix in split(&suffixes, ',')
		let NERDTreeIgnore+=[ escape(suffix, '.~') . '$' ]
	endfor
	let NERDTreeIgnore+=[
		\'^\.bundle$',
		\'^\.bzr$',
		\'^\.git$',
		\'^\.hg$',
		\'^\.svn$',
		\'^\.$',
		\'^\.\.$',
		\'^Thumbs\.db$']

	" Show Git marks in NERDTree
	Plug 'Xuyuanp/nerdtree-git-plugin'

	" Syntax checker
	Plug 'scrooloose/syntastic'
	let g:syntastic_always_populate_loc_list=1
	let g:syntastic_auto_loc_list=1
	let g:syntastic_check_on_open=1
	let g:syntastic_check_on_wq=1
	let g:airline#extensions#syntastic#enabled=1

	" Easy commenting
	Plug 'scrooloose/nerdcommenter'

	" Snippets support
	Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
	let g:UltiSnipsExpandTrigger='<C-Y>'
	let g:UltiSnipsJumpForwardTrigger='<C-B>'
	let g:UltiSnipsJumpBackwardTrigger='<C-Z>'

	" Dart support
	Plug 'dart-lang/dart-vim-plugin'
	let g:dart_style_guide=1

	" Queotes, brackets, etc. autocompletion
	Plug 'Raimondi/delimitMate'

	" File fuzzy-finder
	Plug 'kien/ctrlp.vim'
	let g:airline#extensions#ctrlp#show_adjacent_modes=1

	" Latte templating language support
	Plug 'Janiczek/vim-latte'

	" Dark color scheme
	"Plug 'Grelek/badwolf'

	" Light (Google Material-like) color scheme
	Plug 'NLKNguyen/papercolor-theme'

	" Lightweight powerline replacement
	Plug 'bling/vim-airline'
	let g:airline#extensions#tabline#enabled=1
	if OS=='linux' || OS=='mac'
		let g:airline_powerline_fonts=1
	endif

	" Better PHP support
	Plug 'StanAngeloff/php.vim'

	" Generates promptline settings based on Airline colors
	Plug 'edkolev/promptline.vim'
	let g:airline#extensions#promptline#snapshot_file='~/.shell_prompt.sh'
	let g:airline#extensions#promptline#enabled=1
	let g:airline#extensions#promptline#color_template='insert'
	let g:promptline_powerline_symbols=1
	let g:promptline_theme='airline'
	let g:promptline_preset={
		\'a': [ promptline#slices#user(), promptline#slices#host({'only_if_ssh': 1}) ],
		\'b': [ promptline#slices#cwd() ],
		\'c': [ promptline#slices#vcs_branch(), promptline#slices#git_status() ],
		\'warn': [ promptline#slices#last_exit_code() ],
		\'options': {
			\'left_sections': [ 'a', 'c' ],
			\'left_only_sections': [ 'a', 'c' ]}}

	" Plugin with fantastic support for surrounding
	Plug 'tpope/vim-surround'

	" Deletes all buffers except the one focused
	Plug 'BufOnly.vim'

	" Better HTML5 support
	Plug 'othree/html5.vim'

	" LESS CSS support
	Plug 'groenewege/vim-less'

	" Colored parentheses
	Plug 'junegunn/rainbow_parentheses.vim', { 'on': 'RainbowParentheses' }
	let g:rainbow#pairs = [['(', ')'], ['[', ']'], ['{', '}']]

	" Distraction-free writing mode
	Plug 'junegunn/goyo.vim', { 'on': 'Goyo' }

	" Autocompletion
	Plug 'Valloric/YouCompleteMe', { 'do': './install.sh' }
	let g:ycm_autoclose_preview_window_after_completion=1
	let g:ycm_autoclose_preview_window_after_insertion=1

	" Arduino support
	Plug '4Evergreen4/vim-hardy'
call plug#end()

set backspace=indent,eol,start "Fixes deleting with backspace
set nocompatible "be iMproved, required

set t_Co=256 "Enable 256 colors
syntax on "Turn on syntax highlighting

set number "Show line numbers

set autoindent "Keep same indentation level as on previous line
set tabstop=4 "Tab size is 4 spaces
set shiftwidth=4
set copyindent "Copy the previous indentation on autoindenting
set smarttab "Insert tabs on the start of line according to shiftwidth

set colorcolumn=80 "Set ruler

set incsearch "Show search matches as typed
set hlsearch "Highlight search matches

set autoread "Reload file if it was changed

set showcmd "Show incomplete command ("+y)

set pastetoggle=<F2> "Awesome pasting mode on F2 key

set scrolloff=15 "Keep 15 lines above or below when scrolling

" Persistent undo
set undofile
set undodir=~/.nvim/undo

" Encoding
set encoding=utf-8
set fileencoding=utf-8

" Better indenting of text blocks on double pressing > or <
vnoremap < <gv
vnoremap > >gv

" Automatic reloading of .nvimrc or nvimrc
autocmd! BufWritePost .nvimrc source %
autocmd! BufWritePost nvimrc source ~/.nvimrc

" Leader + g to switch to relative line numbers
nnoremap <Leader>g :call NumberToggle()<CR>

" F8 to rotate between colorschemes
nnoremap <F8> :call RotateColors()<CR>
